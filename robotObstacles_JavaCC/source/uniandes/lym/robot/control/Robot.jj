/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options
{
  LOOKAHEAD= 1;

  IGNORE_CASE = false;
  STATIC = false;
}

PARSER_BEGIN(Robot)
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
@ SuppressWarnings("serial") 
public class Robot
{
  private RobotWorldDec world;
  private HashMap<String,Integer> variables = new HashMap<String,Integer>();
  private ArrayList<String> functions = new ArrayList<String>();
  private ArrayList<Integer> funcParam = new ArrayList<Integer>();
  private ArrayList<String> parameters = new ArrayList<String>();
  private String salida = new String();
  void setWorld(RobotWorld w)
  {
    world = (RobotWorldDec) w;	
  }
}

PARSER_END(Robot)

SKIP :
{
  " "
| 	"\r"
| 	"\t"
  //	| "\n"
}

TOKEN : /* Nombres de Comandos */
{
  < T_MOVE : "MOVE" >
| 	< T_RIGHT : "RIGHT" >
| 	< T_LEFT : "LEFT" >
| 	< T_ROTATE : "ROTATE" >
| 	< T_LOOK : "LOOK" >
| 	< T_DROP : "DROP" >
| 	< T_FREE : "FREE" >
| 	< T_PICK : "PICK" >
| 	< T_POP : "POP" >
| 	< T_CHECK : "CHECK" >
| 	< T_BLOCKEDP : "BLOCKEDP" >
| 	< T_NOP : "NOP" >
| 	< T_BLOCK : "BLOCK" >
| 	< T_REPEAT : "REPEAT" >
| 	< T_IF : "IF" >
| 	< T_DEFINE : "DEFINE" >
| 	< T_TO : "TO" >
| 	< T_OUTPUT : "OUTPUT" >
| 	< T_END : "END" >		
}

TOKEN :
{
  < T_BALLOONS : "B" >
| 	< T_CHIPS : "C" >
| 	< T_NORTH : "N" >
| 	< T_EAST : "E" >
| 	< T_WEST : "W" >
| 	< T_SOUTH : "S" >
}

TOKEN :
{
  < NUMERO : (< DIGIT >)+ >
| 	< #DIGIT : [ "0"-"9" ] >
//modifico name para que siempre empice con un LowerCase 
|	< NAME: ["a"-"z"]([ "A"-"Z" ]|["a"-"z"])*>
}

boolean command(StringBuffer sistema) :
{	
  int x;
}
{
   (commands())*
   {
   System.out.println(salida);
   sistema.append(salida);
   return false;
   }
}

/*
/Metodo que chequea todos los posibles comandos que se pueden ejecutar
*/
void commands() throws Error:
{
}
{
  (
    move()
  | right()
  | left()
  | rotate()
  | look()
  | drop()
  | free()
  | pick()
  | pop()
  | check()
  | block()
  | repeat()
  | ifs()
  | define()
  | function()
  | callFunction()
  | < T_NOP >
  )+
}

/**
*  reconoce un numero entero sin signo
* @return el valor entero correspondiente al valor reconocido
*/
int numero() throws Error :
{	
  int total = 1;
}
{
  < NUMERO >
  {
    try
    {
      total = Integer.parseInt(token.image);
    }
    catch (NumberFormatException ee)
    {
      // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
      // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
      throw new Error("Number out of bounds: " + token.image + "!!");
    }
    return total;
  }
}

/*
/Metodo que define la funcion Move
*/
void move() throws Error:
{
  int val = 0;
}
{
  < T_MOVE >
  val = numOrVar()
  {
   world.moveForward(val);
   //salida ="comando moveForward";
  }
  ("\n"|<EOF>)
}

/*
/Metodo que define la funcion Right
*/
void right() throws Error:
{
  int val = 0;
}
{
  < T_RIGHT > val = numOrVar()
  {
   if(!(val%360==0)) {   
   	if(val>360) {
		while(val>360) {
			val-=360;
		}
   	}
	while(val>0) {  
		val-=90;		
		world.turnRight();
	}
    salida ="comando turnRight";
  }
  }
  ("\n"|<EOF>)
}

/*
/Metodo que define la funcion Left
*/
void left() throws Error:
{
   int val = 0;
}
{
  < T_LEFT > val = numOrVar()
  {
   if(!(val%360==0)) {   
   	if(val>360) {
		while(val>360) {
			val-=360;
		}
   	}
	if(val==90) val = 270;
	else if(val==270) val =90;		
	while(val>0) {  
		world.turnRight();
		val-=90;
	}
    salida ="comando turnLeft";
  }
  }
  ("\n"|<EOF>)
  }

/*
/Metodo que define la funcion Rotate
*/
void rotate() throws Error:
{
  int val = 0;
}
{
  < T_ROTATE > val = numOrVar()
  {
    Random rand = new Random();
    int r = rand.nextInt(2);
	if(r>=1) {
		{
   if(!(val%360==0)) {   
   	if(val>360) {
		while(val>360) {
			val-=360;
		}
   	}
	while(val>0) {  
		val-=90;		
		world.turnRight();
	}
    salida ="comando turnRight";
  }
	}
	}
   else {
      {
   if(!(val%360==0)) {   
   	if(val>360) {
		while(val>360) {
			val-=360;
		}
   	}
	if(val==90) val = 270;
	else if(val==270) val =90;		
	while(val>0) {  
		world.turnRight();
		val-=90;
	}
    salida ="comando turnLeft";
  }
  }
    }
  }
  ("\n"|<EOF>)
}

/*
/Metodo que define la funcion Look
*/
void look():
{
  String x;
  int val = 0;
}
{
  < T_LOOK > ( < T_NORTH > | < T_EAST > | < T_WEST > | < T_SOUTH > )
  {
    x = token.image;
    if(x.equals("N")){
      if(world.facingEast()) {
        val = 270;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      else if(world.facingWest()) {
        val = 90;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      else if(world.facingSouth()) {
        val = 180;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      salida = "Se esta mirando al norte";
    }
    else if(x.equals("S")){
      if(world.facingEast()) {
        val = 90;
		while(val>0) {  
		world.turnRight();
		val-=270;
		}
      }
      else if(world.facingWest()) {
        val = 270;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      else if(world.facingNorth()) {
        val = 180;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      salida = "Se esta mirando al sur";
    }
    else if(x.equals("E")){
      if(world.facingNorth()) {
        val = 90;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      else if(world.facingWest()) {
        val = 180;
		while(val>0) {
		world.turnRight();
		val-=90;
		}
      }
      else if(world.facingSouth()) {
        val = 270;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      salida = "Se esta mirando al este";
    }
    else if(x.equals("W")){
      if(world.facingEast()) {
        val = 180;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      else if(world.facingNorth()) {
        val = 270;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      else if(world.facingSouth()) {
        val = 90;
		while(val>0) {  
		world.turnRight();
		val-=90;
		}
      }
      salida = "Se esta mirando al oeste(west)";
    }
  }
  ("\n"|<EOF>)
}

/*
/Metodo que define la funcion Drop
*/
void drop() throws Error:
{
  int val = 0;
}
{
  < T_DROP > val = numOrVar()
  {
    for(int i=0;val>i;i++)
    	world.putChip();
    salida = "comando DROP";
  }
}

/*
/Metodo que define la funcion Free
*/
void free() throws Error:
{
  int val = 0;
}
{
  < T_FREE > val = numOrVar()
  {
    {
    for(int i=0;val>i;i++)
        world.putBalloon();
	salida = "comando FREE";
  }
  }
  ("\n"|<EOF>)
}

/*
/Metodo que define la funcion Pick
*/
void pick() throws Error:
{
 int val = 0; 
}
{
  < T_PICK > val = numOrVar()
  {
    {
    for(int i=0;val>i;i++)
    	world.putChip();
    salida = "comando PICK";
  }
  }
  ("\n"|<EOF>)
}

/*
/Metodo que define la funcion Pop
*/

void pop() throws Error:
{
  int val = 0;
}
{
  < T_POP > val = numOrVar()
  {
    {
    for(int i=0;val>i;i++)
    	world.popBalloon();
    salida = "comando POP";
  }
  }
  ("\n"|<EOF>)
}

/*
/Metodo que define la funcion Check
*/

void check() throws Error:
{
	int val = 0;
	String x  = "";
}
{
  < T_CHECK > ( < T_CHIPS > | < T_BALLOONS > )
  {
  x = token.image; 
  }
  val = numOrVar()
  {
    if(x.equals("B")) {
		int aux = world.countBalloons();
		if(aux==val)
			salida = "Hay "+val+" globos\n";
		else
			salida = "No hay "+val+" globos\n";
    }
    else {
		boolean aux = world.chipExists();		
		if(aux&&val==1)
			salida = "Hay "+val+" fichas\n";
		else
			salida = "No hay "+val+" fichas\n";
			
    }
  }
  ("\n"|<EOF>)  
}

boolean blockedDP():
{
}
{
  <T_BLOCKEDP>
  {
    boolean x = world.isBlocked(world.getPosition());
    salida = (x)?"El robot se encuentra bloqueado":salida;
	return x;
  }
}


/*
/Metodo que define Block
*/
void block() :
{
}
{
  "(" < T_BLOCK > ["\n"]
  commands()["\n"]
  ")"
}

/*
/Metodo que define la funcion Repeat
*/
void repeat() :
{
}
{
  < T_REPEAT > numOrVar() "[" ["\n"]
  commands()["\n"]
  "]"
}

/*
/Metodo que define la funcion IF (cambie el nombre porque estaba sobreescribiendo el metodo if como tal)
*/
void ifs() throws Error :
{
  boolean val = false;
  String neg = "";
}
{
  < T_IF > ("!")*
  {
  neg = token.image;
	}
  val = blockedDP()
  "[" ["\n"]
  {
   for(int i=0;neg.length()>i;i++)
   	 val = !(val);
   if(val==false) 
     salida = ""+val;
// throw new Error("La condicion es negativa");
   }
  commands()["\n"]
  "]"
}

/*
/Metodo que define la funcion DEFINE
/Se revisa que la funcion no haya sido declarada previamente
*/
void define() throws Error:
{
  String nombre = "";
}
{
	<T_DEFINE> <NAME>
	{
	  nombre = token.image;
	  if(variables.containsKey(nombre)) {
		throw new Error("The variable is already defined");
	  }
	  
		
	  
	}
	numero()
	{
	variables.put(nombre,Integer.parseInt(token.image));
	}
	"\n"
  
}
 
/*
/Metodo que define la funcion TO
*/
void function() throws Error:
{
  Token x;
  int numParams = 0;
  boolean func = parameters.size()>0;
}
{
  {
    if ( func )
    	throw new Error("Can't create a function inside another function");
  }
  < T_TO > (x=< NAME > {
    //Revisar si ya se declaro anteriormente esta variable
	if(variables.containsKey(x)||functions.contains(x))
		throw new Error("The function is already defined");
    functions.add(x.image); })
  (
    ":" (x=< NAME > {
		//Revisar si ya se declaro anteriormente esta variable
		if(variables.containsKey(x)||functions.contains(x))
			throw new Error("The parameter is already defined");
      	parameters.add(x.image);
      	numParams++; })  )* "\n"
  {funcParam.add(numParams);}
  < T_OUTPUT >
  commands()
  < T_END >
  {
    parameters = new ArrayList<String>();
  }
}

/*
/Metodo que llama a una funcion existente
*/
void callFunction() :
{
  Token x;
  int numParameters;
  boolean func = parameters.size()>0;
}
{
  (x=< NAME > {
    if (!functions.contains(Integer.parseInt(x.image))) {
      throw new Error("The function isn't defined");
    }
    else {
      numParameters = funcParam.get(functions.indexOf(x.image));
    }
    })
    ( numOrVar() {numParameters--;} )*
    
    {
      if (numParameters != 0) {
        throw new Error("The function call doesn't contain the right ammount of parameters");
      }
    }
}

/*
/Metodo que evalua si un parametro es una variable existente o un entero
/Se utiliza el metodo numero() para comprobar si es un entero y se revisa la lista de variables para verificar si ya existe la variable
*/
int numOrVar() throws Error:
{
  Token x;
  boolean func = parameters.size()>0;
  boolean isParam = false;
  int val = 0;
}
{
  (val = numero())
  {
	return val;
  }
  | ([":" {isParam = true;
  			if ( !func ) {
  			  throw new Error("Can't use parameters if not inside function");
  			  }
  		}]
  	(x=<NAME> {      
    if (!variables.containsKey(x.image)) {
      if ( isParam ) { 
	      if ( !parameters.contains(Integer.parseInt(x.image))) {
	        throw new Error("The variable " + x.image + " is not defined in the parameters of the function");
	      }
	  } else { 
      	throw new Error("The variable " + x.image + " is not defined");
      }
     return variables.get(x);
     }
   }))
}



